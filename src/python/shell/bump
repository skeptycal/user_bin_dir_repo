#!/usr/bin/env python3

from ._util import *
from .shell import shell, repl, ls, check

bc = BasicColors()

RE_SEMVER = r'^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'

semver: Pattern = re.compile(RE_SEMVER)


SET_DEBUG: int = 2


def main(args=argv):

    poetry_check = shell('poetry check')
    print(poetry_check)
    print(check('poetry check'))

    # get_os_result=os.
    # VERSION = shell("poetry version | cut -d ' ' -f 2")
    # print(VERSION)
    while True:
        s = str(input())
        repl(args=s, debug=SET_DEBUG)


def shell(args: Union[AnyStr, List[AnyStr]],
          input: AnyStr = None,
          capture_output: bool = True,
          timeout: float = DEFAULT_TIMEOUT,
          check: bool = True,
          ignore_errors: bool = True,
          encoding: str = DEFAULT_ENCODING,
          env: Dict = {},
          **kwargs) -> CompletedProcess:
    """ #### Run a shell command using and return a CompletedProcess Instance

        Params:
        - args - shell command and arguments
        - input - optional `stdin` str or bytes
        - timeout - optional time limit to wait for response
        - check - check returncode for non-zero and raise an exception
        - ignore_errors - ignore errors and return whatever is available
        - verbose - catch and return output details
        - env - environment mapping

        Return:
        - args, stdout, stderr
        - returncode - shell command return code (0 is success)

        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


        Reference: Docs for subprocess.run (python 3.8.5)

        Use subprocess.run to access command line results.

        Run command with arguments and return a CompletedProcess instance.

        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those
        attributes will be None. Pass stdout=PIPE and/or stderr=PIPE in order to
        capture them.

        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return
        code in the returncode attribute, and output & stderr attributes if
        those streams were captured.

        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.

        There is an optional argument "input", allowing you to pass bytes or a
        string to the subprocess's stdin. If you use this argument you may not
        also use the Popen constructor's "stdin" argument, as it will be used
        internally.

        By default, all communication is in bytes, and therefore any "input"
        should be bytes, and the stdout and stderr will be bytes. If in text
        mode, any "input" should be a string, and stdout and stderr will be
        strings decoded according to locale encoding, or by "encoding" if set.
        Text mode is triggered by setting any of text, encoding, errors or
        universal_newlines.

        The other arguments are the same as for the Popen constructor.
        """

    if not args:
        raise ShellCommandError()
    # join sequences into strings and bytes
    if isinstance(args, (tuple, set, list)):
        if isinstance(args[0], str):
            args = tuple(' '.join(args).split())
            # args = args.encode(encoding) if not WIN32 else args
        if isinstance(args[0], bytes):
            args = tuple(b' '.join(args).split())
    elif not isinstance(args, (str, bytes)):
        raise TypeError(f'Arguments must be str or bytes, not {type(args)}')

    args = args.split()

    # stdout = PIPE if verbose else None
    # stderr = PIPE if verbose else None  # or STDOUT

    # timeout guard
    if timeout and not isinstance(timeout, float):
        try:
            timeout = float(timeout)
        except (NameError, OverflowError, TypeError, ValueError, ZeroDivisionError) as e:
            # if the problem was an invalid format or type for the timeout, use
            # the default timeout value
            if ignore_errors:
                timeout = DEFAULT_TIMEOUT
            raise
        except Exception as e:
            # all other errors return an error
            if ignore_errors:
                return e
            raise

    try:
        # The returned CompletedProcess instance will have:
        # args, returncode, stdout, and stderr.
        # "input" is optionally used to pass bytes or string to stdin,
        # but is mutually exclusive with Popen's "stdin"
        return run(args=args, capture_output=capture_output,  input=input, encoding=encoding, timeout=timeout, check=check)
    except CalledProcessError as e:
        # An actual error returned from the invoked command 'args'
        # The CalledProcessError instance will have:
        # returncode attribute, and output & stderr if captured.
        if ignore_errors:
            return e  # TODO - log and improve error message
        raise
    except TimeoutError as e:
        # Frozen? Or a long running command was not given enough time to
        # complete. If timeout is given, and the process takes too long,
        # a TimeoutExpired exception will be raised.
        if ignore_errors:
            return e  # TODO - log and improve error message
        raise
    except (FileNotFoundError, IOError, OSError) as e:
        # An actual OSError is caught. We cannot be sure what
        # information is available.
        if ignore_errors:
            return e  # TODO - log and improve error message
        raise
    except (TypeError, ValueError) as e:
        # parameters incorrect type?
        if ignore_errors:
            return e  # TODO - log and improve error message
        raise
    except Exception as e:
        # something very strange happened!
        if ignore_errors:
            return e  # TODO - log and improve error message
        raise


# ls()

if __name__ == '__main__':
    main()


# echo $VERSION

# The new version should ideally be a valid semver string or a valid bump rule:
#   patch, minor, major, prepatch, preminor, premajor, prerelease.

# Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.

# Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards compatible functionality is introduced to the public API. It MUST be incremented if any public API functionality is marked as deprecated. It MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes. Patch version MUST be reset to 0 when minor version is incremented.

# Major version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the public API. It MAY also include minor and patch level changes. Patch and minor version MUST be reset to 0 when major version is incremented.


# semver rules
# Semantic Versioning Specification (SemVer)
# The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.

# Software using Semantic Versioning MUST declare a public API. This API could be declared in the code itself or exist strictly in documentation. However it is done, it SHOULD be precise and comprehensive.

# A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers, and MUST NOT contain leading zeroes. X is the major version, Y is the minor version, and Z is the patch version. Each element MUST increase numerically. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.

# Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications MUST be released as a new version.

# Major version zero (0.y.z) is for initial development. Anything MAY change at any time. The public API SHOULD NOT be considered stable.

# Version 1.0.0 defines the public API. The way in which the version number is incremented after this release is dependent on this public API and how it changes.

# Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.

# Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards compatible functionality is introduced to the public API. It MUST be incremented if any public API functionality is marked as deprecated. It MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes. Patch version MUST be reset to 0 when minor version is incremented.

# Major version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the public API. It MAY also include minor and patch level changes. Patch and minor version MUST be reset to 0 when major version is incremented.

# A pre-release version MAY be denoted by appending a hyphen and a series of dot separated identifiers immediately following the patch version. Identifiers MUST comprise only ASCII alphanumerics and hyphens [0-9A-Za-z-]. Identifiers MUST NOT be empty. Numeric identifiers MUST NOT include leading zeroes. Pre-release versions have a lower precedence than the associated normal version. A pre-release version indicates that the version is unstable and might not satisfy the intended compatibility requirements as denoted by its associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92, 1.0.0-x-y-z.–.

# Build metadata MAY be denoted by appending a plus sign and a series of dot separated identifiers immediately following the patch or pre-release version. Identifiers MUST comprise only ASCII alphanumerics and hyphens [0-9A-Za-z-]. Identifiers MUST NOT be empty. Build metadata MUST be ignored when determining version precedence. Thus two versions that differ only in the build metadata, have the same precedence. Examples: 1.0.0-alpha+001, 1.0.0+20130313144700, 1.0.0-beta+exp.sha.5114f85, 1.0.0+21AF26D3—-117B344092BD.

# Precedence refers to how versions are compared to each other when ordered.

# Precedence MUST be calculated by separating the version into major, minor, patch and pre-release identifiers in that order (Build metadata does not figure into precedence).

# Precedence is determined by the first difference when comparing each of these identifiers from left to right as follows: Major, minor, and patch versions are always compared numerically.

# Example: 1.0.0 < 2.0.0 < 2.1.0 < 2.1.1.

# When major, minor, and patch are equal, a pre-release version has lower precedence than a normal version:

# Example: 1.0.0-alpha < 1.0.0.

# Precedence for two pre-release versions with the same major, minor, and patch version MUST be determined by comparing each dot separated identifier from left to right until a difference is found as follows:

# Identifiers consisting of only digits are compared numerically.

# Identifiers with letters or hyphens are compared lexically in ASCII sort order.

# Numeric identifiers always have lower precedence than non-numeric identifiers.

# A larger set of pre-release fields has a higher precedence than a smaller set, if all of the preceding identifiers are equal.

# Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-alpha.beta < 1.0.0-beta < 1.0.0-beta.2 < 1.0.0-beta.11 < 1.0.0-rc.1 < 1.0.0.
