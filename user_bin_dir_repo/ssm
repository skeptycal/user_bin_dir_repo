#!/usr/bin/env zsh
# -*- coding: utf-8 -*-
    # shellcheck shell=bash
    # shellcheck source=/dev/null
    # shellcheck disable=2178,2128,2206,2034
#?############################################################################
#*	standard script modules
#*	    Colors ... shortcuts ... the pathway to an easier life ...
#*      tested on macOS Big Sur and zsh 5.8
#*	copyright (c) 2019 Michael Treanor
#*	MIT License - https://www.github.com/skeptycal
#?############################################################################
#? -----------------------------> environment
    SCRIPT_NAME=${0##*/}
	set -a # export all
	# declare -ix SET_DEBUG=${SET_DEBUG:-0}  		# set to 1 for verbose testing

#? -----------------------------> BASH compatibility
	if [[ ${SHELL##*/} == 'zsh' ]]; then
    	setopt interactivecomments
        setopt SH_WORD_SPLIT # 'BASH style' word splitting
        BASH_SOURCE=${(%):-%N}
    else
        BASH_SOURCE=${BASH_SOURCE:=$0}
    fi
#? -----------------------------> debug
	_debug_tests() {
        printf '%b\n' "${WARN:-}Debug Mode Details for ${CANARY}${SCRIPT_NAME##*/}${RESET:-}"

        # script specific debug info and tests
        color_sample
        _debug_show_paths
        }
#? -----------------------------> copyright (c) 2019 Michael Treanor
    main() { # call 'main' from the end of the script
        (( SET_DEBUG > 0 )) && _debug_tests "$@"
        set_basic_colors
        path_setup
    }

#? -----------------------------> ansi colors, path, brew, tempfile
	set_basic_colors() {
        # I use GNU core_utils; no need to test '-G'
        export CLICOLOR=1
        export colorflag='--color=always'

        # alias ls="ls \$colorflag "

        # terminal identification
        if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
            declare -x TERM='gnome-256color';
        elif infocmp xterm-256color >/dev/null 2>&1; then
            declare -x TERM='xterm-256color';
        fi;

		if [ -t 1 ]; then
			export MAIN="\001\033[38;5;229m"
			export WARN="\001\033[38;5;203m"
			export COOL="\001\033[38;5;38m"
			export BLUE="\001\033[38;5;38m"
			export GO="\001\033[38;5;28m"
			export LIME="\001\033[32;1m"
			export CHERRY="\001\033[38;5;124m"
			export CANARY="\001\033[38;5;226m"
			export ATTN="\001\033[38;5;178m"
			export PURPLE="\001\033[38;5;93m"
			export RAIN="\001\033[38;5;93m"
			export WHITE="\001\033[37m"
			export RESTORE="\001\033[0m\002"
			export RESET="\001\033[0m"
		else
			export MAIN=
			export WARN=
			export COOL=
			export BLUE=
			export GO=
			export LIME=
			export CHERRY=
			export CANARY=
			export ATTN=
			export PURPLE=
			export RAIN=
			export WHITE=
			export RESTORE=
			export RESET=
		fi

        # GIT colors
        declare -x WS="$(git config --get-color color.diff.whitespace "blue reverse")"
        declare -x RESET="$(git config --get-color "" "reset")"

        # Highlight the user name when logged in as root.
        if [[ "${USER}" == "root" ]]; then
            declare -x userStyle="\${red}"
        else
            declare -x userStyle="\${orange}"
        fi

		br() { printf "\n" ; } # yes, this is a fake <br />
		eprint() { printf "%b\n" "${*:-}" ; }
		ce() { printf "%b\n" "${*:-}${RESET:-}" ; }
		me() { ce "${MAIN:-}${*:-}" ; }
		warn() { ce "${WARN:-}${*:-}" ; }
		blue() { ce "${COOL:-}${*:-}" ; }
		cool() { ce "${COOL:-}${*:-}" ; }
		green() { ce "${GO:-}${*:-}" ; }
		lime() { ce "${LIME:-}${*:-}" ; }
		cherry() { ce "${CHERRY:-}${*:-}" ; }
		canary() { ce "${CANARY:-}${*:-}" ; }
		attn() { ce "${ATTN:-}${*:-}" ; }
		purple() { ce "${PURPLE:-}${*:-}" ; }
		rain() { ce "${RAIN:-}${*:-}" ; }
		white() { ce "${WHITE:-}${*:-}" ; }
		}
	path_setup() { #! call when PWD changes
		HERE=$(realpath $PWD)

		# add colors if tty is setup
		SCRIPT_NAME="${BLUE:-}${BASH_SOURCE##*/}${RESET:-}"
		SCRIPT_PATH="${CANARY:-}${BASH_SOURCE%/*}${RESET:-}"
		REPO_PATH="${LIME:-}${HERE%/*}${RESET:-}"
		REPO_NAME="${RAIN:-}${REPO_PATH##*/}${RESET:-}"

		# Locations of profile settings files
		DOTFILES_PATH="${HOME}/.dotfiles"
		DOTFILES_INC="${DOTFILES_PATH}/zshrc_inc"
		}
	get_brew_prefix(){ #! This is SLOW ... use as needed
		BREW_PREFIX="$(brew --prefix)"
		}

	temp_setup() { #! somewhat slow ... use as needed
		TEMP_DIR="$(mktemp -q -d -t "$(basename "$0").XXXXXX" 2>/dev/null || mktemp -q -d)"
		TEMP_FILE="$TEMP_DIR/tmp_proc_random.$$.$RANDOM"
		}

#? -----------------------------> debug
	color_sample() {
		ce "${MAIN:-}C  ${WARN:-}O  ${COOL:-}L  ${LIME:-}O  ${GO:-}R ${WHITE:-}--- ${CHERRY:-}S  ${CANARY:-}A  ${ATTN:-}M  ${RAIN:-}P  ${WHITE:-}L  ${RESET:-}E"
		ce "${MAIN:-}MAIN  ${WARN:-}WARN  ${COOL:-}COOL  ${LIME:-}LIME  ${GO:-}GO  ${CHERRY:-}CHERRY  ${CANARY:-}CANARY  ${ATTN:-}ATTN  ${RAIN:-}RAIN  ${WHITE:-}WHITE  ${RESET:-}RESET";
		}
    _debug_show_paths() {
        tmp='BASH_SOURCE SCRIPT_NAME SCRIPT_PATH REPO_PATH REPO_NAME SHELL SET_DEBUG VERSION'
        for i in $tmp; do
            echo "${MAIN:-}${(r:15:)i} ... ${CANARY:-}${(P)i}${RESET:-}"
        done;
		unset tmp
    	}

#? -----------------------------> constants
	VERSION="${ATTN:-}0.1.0${RESET:-}"
	SYS_USERID="$(id -un):$(id -gn)"
	NL=$(printf "\n")

#? -----------------------------> configuration
	# return current milliseconds from system clock
	ms() { printf '%b' $(($(gdate +%s%0N)/1000000)) }
	t0=$(ms)

    cleanup() {
        # cleanup and exit script

        # calculate and display script time
        dt=$(( $(ms)-t0 ))
		printf '\n%b %d %b\n\n' "${GREEN:-}Script ${SCRIPT_NAME} took" ${dt} "ms to load.${RESET:-}"
        unset t0 dt
    	}
    trap cleanup EXIT

#? -----------------------------> utilities
	dbecho() { (( SET_DEBUG==1 )) && echo "${ATTN:-}${@}${RESET:-}"; }
	die() { echo "${WARN:-}$@" && exit 1; }
	is_empty() { [ -z "$(ls -A $1)" ]; }
    exists() { command -v $1 > /dev/null 2>&1 ; }
	_setup_brew() {
		get_brew_prefix #! This is SLOW ... use as needed
		if (( SET_DEBUG == 1 )); then
			echo "${ATTN:-}Install brew if it is not installed... (skipped in debug mode)."
		else
        	exists brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

			brew cleanup
			brew doctor
			brew update

			brew install gcc zlib
			brew upgrade gcc zlib

			brew cleanup
			brew doctor
		fi
	}  > /dev/null 2>&1

#? -----------------------------> args and options
	usage() {
		# print default usage statement if none given
		if [ -n $1 ]; then
			printf '%b' "${LIME:-}$@${RESET:-}"
		elif [ -n $USAGE ]; then
			printf '%b' "${USAGE}${RESET:-}"
		else
			printf '%b' "${GREEN:-}USAGE: ${SCRIPT_NAME}${GREEN:-} [-h|--help] [-v|--version] [FILES]${RESET:-}"
		fi
		}

	set_options() {
		(( $# < 2 )) && die $(usage)
		while (( $# > 0 )); do
			case $1 in
				-h|--help)
					usage
					exit 0
					;;
				-v|--version)
					echo "${SCRIPT_NAME} version ${VERSION}"
					exit 0
					;;
				--dry-run)
					echo "${SCRIPT_NAME} in ${ATTN:-}'--dry-run'${RESET:-} mode ${GREEN:-}(only show commands ... do nothing)${RESET:-}"
					SET_DEBUG=1
					set +n
					;;
				--patch)
					echo "${MAIN:-}Performing patch and install from source for python in ${REPO_NAME}."
					echo ""
					PATCH=1
					;;
				-*)
					OPTIONS="$OPTIONS $1"
					;;
				*)
					ARGS="$ARGS $1"
					;;
			esac
			shift
		done
		(( SET_DEBUG==1 )) && printf "%bARGS: %s\nOPTIONS: %s\n" $ATTN $ARGS $OPTIONS
		}



main "$@"
